# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VAR(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id=None, value=None, type=None):  # noqa: E501
        """VAR - a model defined in Swagger

        :param id: The id of this VAR.  # noqa: E501
        :type id: str
        :param value: The value of this VAR.  # noqa: E501
        :type value: str
        :param type: The type of this VAR.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'id': str,
            'value': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'value': 'value',
            'type': 'type'
        }

        self._id = id
        self._value = value
        self._type = type

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VAR of this VAR.  # noqa: E501
        :rtype: VAR
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VAR.


        :return: The id of this VAR.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VAR.


        :param id: The id of this VAR.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this VAR.


        :return: The value of this VAR.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this VAR.


        :param value: The value of this VAR.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def type(self):
        """Gets the type of this VAR.


        :return: The type of this VAR.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VAR.


        :param type: The type of this VAR.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
